{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to GeoNEX This is a collection of documentation for GeoNEX users. GeoNEX aims key challenges of data-driven geostationary satellite research, including but are not limited to, access to sufficient computing resources, massive data transfer, standardized analysis workflows and reproducibility to communicate analyses so that they can be reused and extended. Before you get started, you might want to check out our project slides . Concepts in GeoNEX About the word \u201cIMAGE\" and \u201cContainer\u201d: Note that we avoid the use of the word IMAGE as it is way too vague and it is heavily overloaded, and also easily confused with the Remote-Sensed Data Products from satellite or Imagery-based Map. In GeoNEX, we use the word \"image\" to denote very different types of data and data products. We want to evangelize a new way to talk about algorithms/softwares/services running on GeoNEX. GEONEX Account** - An AWS account, you need to create it to get access to GEONEX resources, including algorithms, runners, tasks, AWS instances and buckets. Buckets - AWS S3 buckets, used as input and output storage of GEONEX products. The geonex algorithm pools has different algorithms based on GEONEX datasets. The dataset category enables to display the latest ready datasets for downloading or used by scientists. NOAA GOES-16 and GOES-17 have been trackable real-time and Himawari8 is semi real-time. Repos - a dockerized algorithm, within it a combination of a file system and GEO application was built. It can be hosted on public docker registry services ( hub.docker ; AWS ECR ; gcr.io ) Containers - a standard unit on GEONEX approved by the administrator to finish specific processing/analysis jobs. User enable to see all running, stopped, or finished tasks in the dashboard. Some user with permission also can view products from the specific tasks, and check log files for each task. These tasks are automatically executed at the back-end using EC2 instances. User can also customize the instances with different types and sizes for running each container. Tasks - the runtime instance of a GEONEX containers. Workspace - containers related to specific output buckets, which can be browsed in the viewer Policies After registering their images, guest user opens GEONEX Images tab, and clicks \u201c Request\u201d button. The dashboard will automatically send an email notification to system administrator, and let him/her know there is one image need him/her approve. Administrator logins the dashboard and clicks \u201cApprove\u201d button, then finish the approval. AWS EC2 instance Policies Best Practices Frequently Asked Questions How did GEONEX works? GEONEX consists of data buckets co-located with a group of standard dockerized algorithms as computation service. The datasets houses a large repository of publicly available geostationary datasets as well as GEONEX products. Users can access and analyze data from the public catalog using geonex containers as as well as their own analysis once dockerized. Also users can leverage their work to powerful features provided by GEONEX, including real-time analytics, standard preprocessing, cloud detection, visualization, etc. Which sensors supported? We aim to support the land monitoring capabilities of new generation geostationary platforms, includes: ABI \u2013 Advanced Baseline Imager on GOES-R/T AHI \u2013 Advanced Himawari Imager on Himawari AMI \u2013 Advanced Meteorological Imager on GEO-KOMPSAT2 FCI \u2013 Flexible Combined Imager on MTG AGRI \u2013 Advanced Geosynchronous Radiation Imager on Fengyun-4 What products in plan? What are the relationships between NEX, GeoNEX and OpenNEX? NASA Earth eXchange (NEX), a collaborative supercomputing and data analytics platform, improves the availability of Earth science data from NASA missions and other sources, models, analysis tools and research results through a centralized environment that fosters knowledge sharing, collaboration, and innovation. GEONEX (https://geonex.org) is a web-based scientific platform for earth science community to analyze the new generation of Geostationary (GEO) datasets. OpenNEX is the knowledge discovery portal of NEX.","title":"Home"},{"location":"#welcome-to-geonex","text":"This is a collection of documentation for GeoNEX users. GeoNEX aims key challenges of data-driven geostationary satellite research, including but are not limited to, access to sufficient computing resources, massive data transfer, standardized analysis workflows and reproducibility to communicate analyses so that they can be reused and extended. Before you get started, you might want to check out our project slides .","title":"Welcome to GeoNEX"},{"location":"#concepts-in-geonex","text":"About the word \u201cIMAGE\" and \u201cContainer\u201d: Note that we avoid the use of the word IMAGE as it is way too vague and it is heavily overloaded, and also easily confused with the Remote-Sensed Data Products from satellite or Imagery-based Map. In GeoNEX, we use the word \"image\" to denote very different types of data and data products. We want to evangelize a new way to talk about algorithms/softwares/services running on GeoNEX. GEONEX Account** - An AWS account, you need to create it to get access to GEONEX resources, including algorithms, runners, tasks, AWS instances and buckets. Buckets - AWS S3 buckets, used as input and output storage of GEONEX products. The geonex algorithm pools has different algorithms based on GEONEX datasets. The dataset category enables to display the latest ready datasets for downloading or used by scientists. NOAA GOES-16 and GOES-17 have been trackable real-time and Himawari8 is semi real-time. Repos - a dockerized algorithm, within it a combination of a file system and GEO application was built. It can be hosted on public docker registry services ( hub.docker ; AWS ECR ; gcr.io ) Containers - a standard unit on GEONEX approved by the administrator to finish specific processing/analysis jobs. User enable to see all running, stopped, or finished tasks in the dashboard. Some user with permission also can view products from the specific tasks, and check log files for each task. These tasks are automatically executed at the back-end using EC2 instances. User can also customize the instances with different types and sizes for running each container. Tasks - the runtime instance of a GEONEX containers. Workspace - containers related to specific output buckets, which can be browsed in the viewer","title":"Concepts in GeoNEX"},{"location":"#policies","text":"After registering their images, guest user opens GEONEX Images tab, and clicks \u201c Request\u201d button. The dashboard will automatically send an email notification to system administrator, and let him/her know there is one image need him/her approve. Administrator logins the dashboard and clicks \u201cApprove\u201d button, then finish the approval.","title":"Policies"},{"location":"#aws-ec2-instance","text":"","title":"AWS EC2 instance"},{"location":"#policies_1","text":"","title":"Policies"},{"location":"#best-practices","text":"","title":"Best Practices"},{"location":"#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"#how-did-geonex-works","text":"GEONEX consists of data buckets co-located with a group of standard dockerized algorithms as computation service. The datasets houses a large repository of publicly available geostationary datasets as well as GEONEX products. Users can access and analyze data from the public catalog using geonex containers as as well as their own analysis once dockerized. Also users can leverage their work to powerful features provided by GEONEX, including real-time analytics, standard preprocessing, cloud detection, visualization, etc.","title":"How did GEONEX works?"},{"location":"#which-sensors-supported","text":"We aim to support the land monitoring capabilities of new generation geostationary platforms, includes: ABI \u2013 Advanced Baseline Imager on GOES-R/T AHI \u2013 Advanced Himawari Imager on Himawari AMI \u2013 Advanced Meteorological Imager on GEO-KOMPSAT2 FCI \u2013 Flexible Combined Imager on MTG AGRI \u2013 Advanced Geosynchronous Radiation Imager on Fengyun-4","title":"Which sensors supported?"},{"location":"#what-products-in-plan","text":"","title":"What products in plan?"},{"location":"#what-are-the-relationships-between-nex-geonex-and-opennex","text":"NASA Earth eXchange (NEX), a collaborative supercomputing and data analytics platform, improves the availability of Earth science data from NASA missions and other sources, models, analysis tools and research results through a centralized environment that fosters knowledge sharing, collaboration, and innovation. GEONEX (https://geonex.org) is a web-based scientific platform for earth science community to analyze the new generation of Geostationary (GEO) datasets. OpenNEX is the knowledge discovery portal of NEX.","title":"What are the relationships between NEX, GeoNEX and OpenNEX?"},{"location":"about/","text":"About GeoNEX The new generation of GOES satellites carry the Advanced Baseline Imager (ABI) with spectral, spatial and radiometric resolutions comparable to EOS workhorse MODIS. More importantly ABI provides observations at 5-15 minute intervals offering exciting possibilities for producing robust biophysical variables by overcoming cloud cover, enabling studies of local-to-regional biosphere-atmosphere interactions, and operational decision-making in agriculture, forestry and range management. GEONEX is a web-based scientific platform for addressing on the key challenges of data-driven Geostationary (GEO) datasets, including but are not limited to, access to sufficient computing resources, massive data transfer, standardized analysis workflows and reproducibility to communicate analyses so that they can be reused and extended. During the last two years, the GEONEX team have made substantial improvements to the core framework, user interface, tools, and training materials. Framework and user interface improvements now enable GEONEX to be used for streamlining analyzing tens of thousands of CONUS as well as Full Disk Scan of GOES16 and Himawari-9. How to submit an issue submit an issue Contact Write to us (geonex84@gmail.com) to get an account on GEONEX.","title":"About"},{"location":"about/#about-geonex","text":"The new generation of GOES satellites carry the Advanced Baseline Imager (ABI) with spectral, spatial and radiometric resolutions comparable to EOS workhorse MODIS. More importantly ABI provides observations at 5-15 minute intervals offering exciting possibilities for producing robust biophysical variables by overcoming cloud cover, enabling studies of local-to-regional biosphere-atmosphere interactions, and operational decision-making in agriculture, forestry and range management. GEONEX is a web-based scientific platform for addressing on the key challenges of data-driven Geostationary (GEO) datasets, including but are not limited to, access to sufficient computing resources, massive data transfer, standardized analysis workflows and reproducibility to communicate analyses so that they can be reused and extended. During the last two years, the GEONEX team have made substantial improvements to the core framework, user interface, tools, and training materials. Framework and user interface improvements now enable GEONEX to be used for streamlining analyzing tens of thousands of CONUS as well as Full Disk Scan of GOES16 and Himawari-9.","title":"About GeoNEX"},{"location":"about/#how-to-submit-an-issue","text":"submit an issue","title":"How to submit an issue"},{"location":"about/#contact","text":"Write to us (geonex84@gmail.com) to get an account on GEONEX.","title":"Contact"},{"location":"admin/","text":"Deploy GeoNEX","title":"Admin Handbook"},{"location":"admin/#deploy-geonex","text":"","title":"Deploy GeoNEX"},{"location":"algo-ref/","text":"Algorithm Reference","title":"Algorithm Reference"},{"location":"algo-ref/#algorithm-reference","text":"","title":"Algorithm Reference"},{"location":"core-api/","text":"GeoNEX-core Restful APIs Document Start Runner Name : Start RealTime Runner Description : This api is used to start a real-timer runner in GEONEX dash Http Request Method : GET URL : /start-runner Input Parameter : instance_type : String image_name: String s3_output: String runner_id : String runner_name : String Output Parameter : success or error code Request Example : /start-runner?instance_type=m5d.4xlarge image_name=geonex/active_fire_go16abi15:1.5 s3_output=s3://geonex/GO16_ABI15 runner_id=8dcdfcd4-c21a-c8ba-5152-9475dea5f1bd runner_name=Production Restart Runner Name : Restart Runner Description : This api is used to restart a real-timer runner in GEONEX dash Http Request Method : GET URL : /restart-runner Input Parameter : instance_id : String image_name: String s3_output: String runner_id : String runner_name : String Output Parameter : success or error code Request Example : /restart-runner?instance_id=i-01730beccb93d7c5c image_name=geonex/active_fire_go16abi15:1.5 s3_output=s3://geonex/GO16_ABI15 runner_id=8dcdfcd4-c21a-c8ba-5152-9475dea5f1bd runner_name=Production Stop Runner Name : Stop Runner Description : This api is used to stop a real-timer runner in GEONEX dash Http Request Method : GET URL : /stop-runner Input Parameter : instance_id : String runner_id : String runner_name : String Output Parameter : success or error code Request Example : /stop-runner?instance_id=i-01730beccb93d7c5c runner_id=8dcdfcd4-c21a-c8ba-5152-9475dea5f1bd runner_name=Production Delete Runner Name : Delete Runner Description : This api is used to delete a real-timer runner in GEONEX dash Http Request Method : GET URL : /delete-runner Input Parameter : instance_id : String runner_id : String runner_name : String Output Parameter : success or error code Request Example : /delete-runner?instance_id=i-01730beccb93d7c5c runner_id=8dcdfcd4-c21a-c8ba-5152-9475dea5f1bd Send Email Name : Send Email Description : This api is used to send email to applicant who requests to register his/her algorithm dockers in GEONEX dash Http Request Method : GET URL : /send-email Input Parameter : image_name: String user_name : String email : String Output Parameter : success or error code Request Example: /send-email?image_name=i-01730beccb93d7c5c user_name=user1 email=email@gmail.com Get S3 Usage Name : Get S3 Usage Description : This api is used to send email to get the usage of s3 output in GEONEX dash Http Request Method : GET URL : /get-s3-usage Input Parameter : N/A Output Parameter : json Request Example : Describe Images Name : Describe Images Description : This api is used to describe all images registered in GEONEX dash Http Request Method : GET URL : /describe-images Input Parameter : json Output Parameter : success or error code Request Example : /describe-images Describe Containers Name : Describe Containers Description : This api is used to describe all containers in GEONEX dash, including running, finished containers. Http Request Method : GET URL : /describe-containers Input Parameter : N/A Output Parameter : json Request Example : /describe-containers Describe Runner Containers Name : Describe Runner Containers Description : This api is used to describe runner\u2019s containers in GEONEX dash, including running, finished containers. Http Request Method : GET URL : /describe-runner-containers Input Parameter : N/A Output Parameter : json Request Example : /describe-runner-containers Describe Users Name : Describe Users Description : This api is used to describe users in GEONEX dash. Http Request Method: GET URL : /describe-users Input Parameter : N/A Output Parameter : json Request Example : /describe-users Register User Name : Register User Description : This api is used to register user in GEONEX dash. Http Request Method : POST URL : /register-user Input Parameter : user_name : String password: String Display_name : String email : String Output Parameter : json Request Example : /describe-users","title":"Core-API Reference"},{"location":"core-api/#geonex-core-restful-apis-document","text":"Start Runner Name : Start RealTime Runner Description : This api is used to start a real-timer runner in GEONEX dash Http Request Method : GET URL : /start-runner Input Parameter : instance_type : String image_name: String s3_output: String runner_id : String runner_name : String Output Parameter : success or error code Request Example : /start-runner?instance_type=m5d.4xlarge image_name=geonex/active_fire_go16abi15:1.5 s3_output=s3://geonex/GO16_ABI15 runner_id=8dcdfcd4-c21a-c8ba-5152-9475dea5f1bd runner_name=Production Restart Runner Name : Restart Runner Description : This api is used to restart a real-timer runner in GEONEX dash Http Request Method : GET URL : /restart-runner Input Parameter : instance_id : String image_name: String s3_output: String runner_id : String runner_name : String Output Parameter : success or error code Request Example : /restart-runner?instance_id=i-01730beccb93d7c5c image_name=geonex/active_fire_go16abi15:1.5 s3_output=s3://geonex/GO16_ABI15 runner_id=8dcdfcd4-c21a-c8ba-5152-9475dea5f1bd runner_name=Production Stop Runner Name : Stop Runner Description : This api is used to stop a real-timer runner in GEONEX dash Http Request Method : GET URL : /stop-runner Input Parameter : instance_id : String runner_id : String runner_name : String Output Parameter : success or error code Request Example : /stop-runner?instance_id=i-01730beccb93d7c5c runner_id=8dcdfcd4-c21a-c8ba-5152-9475dea5f1bd runner_name=Production Delete Runner Name : Delete Runner Description : This api is used to delete a real-timer runner in GEONEX dash Http Request Method : GET URL : /delete-runner Input Parameter : instance_id : String runner_id : String runner_name : String Output Parameter : success or error code Request Example : /delete-runner?instance_id=i-01730beccb93d7c5c runner_id=8dcdfcd4-c21a-c8ba-5152-9475dea5f1bd Send Email Name : Send Email Description : This api is used to send email to applicant who requests to register his/her algorithm dockers in GEONEX dash Http Request Method : GET URL : /send-email Input Parameter : image_name: String user_name : String email : String Output Parameter : success or error code Request Example: /send-email?image_name=i-01730beccb93d7c5c user_name=user1 email=email@gmail.com Get S3 Usage Name : Get S3 Usage Description : This api is used to send email to get the usage of s3 output in GEONEX dash Http Request Method : GET URL : /get-s3-usage Input Parameter : N/A Output Parameter : json Request Example : Describe Images Name : Describe Images Description : This api is used to describe all images registered in GEONEX dash Http Request Method : GET URL : /describe-images Input Parameter : json Output Parameter : success or error code Request Example : /describe-images Describe Containers Name : Describe Containers Description : This api is used to describe all containers in GEONEX dash, including running, finished containers. Http Request Method : GET URL : /describe-containers Input Parameter : N/A Output Parameter : json Request Example : /describe-containers Describe Runner Containers Name : Describe Runner Containers Description : This api is used to describe runner\u2019s containers in GEONEX dash, including running, finished containers. Http Request Method : GET URL : /describe-runner-containers Input Parameter : N/A Output Parameter : json Request Example : /describe-runner-containers Describe Users Name : Describe Users Description : This api is used to describe users in GEONEX dash. Http Request Method: GET URL : /describe-users Input Parameter : N/A Output Parameter : json Request Example : /describe-users Register User Name : Register User Description : This api is used to register user in GEONEX dash. Http Request Method : POST URL : /register-user Input Parameter : user_name : String password: String Display_name : String email : String Output Parameter : json Request Example : /describe-users","title":"GeoNEX-core Restful APIs Document"},{"location":"devel-ref/","text":"Development Reference","title":"Development Reference"},{"location":"devel-ref/#development-reference","text":"","title":"Development Reference"},{"location":"userguide/","text":"Get Started This article will guide you through your first steps in GeoNEX dashbard. You'll be working with some sample data from GOES16 . You'll see examples of a wildfire real-time detection using GeoNEX. In Part 1, you'll learn how to: submit an algorithm request a cloud runner retrieve geostationary data from AWS S3 bucket check the outputs of algorithm as well as the runtime log In Part 2, you'll learn how to: create visualization analytics code for your outputs run the code in the notebook share your results with others How to register docker image? The docker image could come from one public docker hub, where user can directly download it without any permissions. User have to put image\u2019s source, description, user name, email, and user\u2019s organization when registering your image. Once you register the image, the image can be found in NEX Repositories like below: For each image, user can execute \u201cRun\u201d action. If the image has not been downloaded in current running instances, INSTANCE label will show as \u201cnull\u201d. User can select the instance type they would like, customize the command line to run, and output like Amazon S3 bucket. Once running docker image, user can find the launched tasks in Cloud Task list, each task display some details include image names, instance type, status, launched time, command, and instance id.","title":"User Guide"},{"location":"userguide/#get-started","text":"This article will guide you through your first steps in GeoNEX dashbard. You'll be working with some sample data from GOES16 . You'll see examples of a wildfire real-time detection using GeoNEX. In Part 1, you'll learn how to: submit an algorithm request a cloud runner retrieve geostationary data from AWS S3 bucket check the outputs of algorithm as well as the runtime log In Part 2, you'll learn how to: create visualization analytics code for your outputs run the code in the notebook share your results with others","title":"Get Started"},{"location":"userguide/#how-to-register-docker-image","text":"The docker image could come from one public docker hub, where user can directly download it without any permissions. User have to put image\u2019s source, description, user name, email, and user\u2019s organization when registering your image. Once you register the image, the image can be found in NEX Repositories like below: For each image, user can execute \u201cRun\u201d action. If the image has not been downloaded in current running instances, INSTANCE label will show as \u201cnull\u201d. User can select the instance type they would like, customize the command line to run, and output like Amazon S3 bucket. Once running docker image, user can find the launched tasks in Cloud Task list, each task display some details include image names, instance type, status, launched time, command, and instance id.","title":"How to register docker image?"}]}